package edu.depaul.cdm.se450.airline.database;

import edu.depaul.cdm.se450.airline.data.AirplaneSeat;
import static edu.depaul.cdm.se450.airline.mockdata.Mock737SeatData.AVAILABLE_AISLE;
import static edu.depaul.cdm.se450.airline.mockdata.Mock737SeatData.MAX_SEAT_ROW;
import static edu.depaul.cdm.se450.airline.mockdata.Mock737SeatData.MIN_SEAT_ROW;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Properties;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *  Test methods to test query for available seat service
 */
public class SeatDAOTest {
    
    private static Connection conn;
    
    @BeforeClass
    public static void setUpClass() throws ClassNotFoundException, SQLException {
        Properties properties = new Properties();
        ClassLoader loader = Thread.currentThread().getContextClassLoader();
        InputStream stream = loader.getResourceAsStream("driver.properties");
        try {
            properties.load(stream);
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }

        String driverClassName = properties.getProperty("driver.class");
        String dsn = properties.getProperty("driver.dsn");
        String userId = properties.getProperty("driver.uid");
        String password = properties.getProperty("driver.password");
        Class.forName(driverClassName);

        conn = DriverManager.getConnection(dsn, userId, password);
        Statement stmt = conn.createStatement();
        stmt.execute("CREATE TABLE AIRPLANE_SEAT (SEATID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL,FLIGHT_NUM VARCHAR(6), SEATNUMBER VARCHAR(5),IS_AVAILABLE BOOLEAN)");

        ArrayList<AirplaneSeat> seats = new ArrayList();
        PreparedStatement insertStmt = conn.prepareStatement("insert into AIRPLANE_SEAT (FLIGHT_NUM, SEATNUMBER,IS_AVAILABLE) values('UA123', ?, ?)");
        for (int row = MIN_SEAT_ROW; row < MAX_SEAT_ROW; row++) {
            for (String aisle : AVAILABLE_AISLE) {
                insertStmt.setString(1, row + aisle);
                insertStmt.setBoolean(2, row % 2 == 0);
                insertStmt.execute();
            }
        }
    }
    
    @Before
    public void setUp() {
        instance = new SeatDAO(conn);
    }
    
    private SeatDAO instance;
    
    @Test
    public void testAvailableSeat() {
        boolean expResult = true;
        boolean result = instance.isSeatAvailable("UA123", 2, "A");
        assertEquals(expResult, result);
    }
    
    @Test
    public void testUnavailableSeat() {
        boolean expResult = false;
        boolean result = instance.isSeatAvailable("UA123", 3, "A");
        assertEquals(expResult, result);
    }
    
    @Test
    public void testNumOfSeats() {
        int expResult = 114;
        int result = instance.getSeatAvailability("UA123").size();
        assertEquals(expResult, result);
    }
}
